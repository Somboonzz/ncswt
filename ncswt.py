import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz 

# ----------------------------------------------------------------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ CSS
# ----------------------------------------------------------------------------------
st.set_page_config(page_title="HR Dashboard", layout="wide")

st.markdown("""
    <style>
        /* CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) */
        div[data-testid="stDataframeHeader"] div {
            text-align: center !important;
            vertical-align: middle !important;
            justify-content: center !important;
        }
        
        div[data-testid="stDataframeCell"] {
            text-align: center !important;
            justify-content: center !important;
        }

        .stDataFrame {
            margin-left: 1rem;
            margin-right: 1rem;
        }
    </style>
    """, unsafe_allow_html=True)

# ----------------------------------------------------------------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢
# ----------------------------------------------------------------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    return dt.strftime(f"%d/%m/{dt.year + 543}")

thai_months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]

def format_thai_month(period):
    year = period.year + 543
    month = thai_months[period.month - 1]
    return f"{month} {year}"

# ----------------------------------------------------------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
# ----------------------------------------------------------------------------------
@st.cache_data(ttl=300)
def load_data(file_path="attendances.xlsx"):
    try:
        if file_path and os.path.exists(file_path):
            df = pd.read_excel(file_path, engine='openpyxl', dtype={'‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô': str, '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô': str})
            return df
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame()

df = load_data()

# ----------------------------------------------------------------------------------
# ‡∏õ‡∏∏‡πà‡∏° Refresh ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
# ----------------------------------------------------------------------------------
if st.button("üîÑ Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Manual)"):
    st.cache_data.clear()
    st.rerun()

bangkok_now = datetime.datetime.now(pytz.utc).astimezone(bangkok_tz)
st.markdown(
    f"<div style='text-align:right; font-size:50px; color:#FF5733; font-weight:bold;'>"
    f"üóì {thai_date(bangkok_now)} | ‚è∞ {bangkok_now.strftime('%H:%M:%S')}</div>",
    unsafe_allow_html=True
)

# ----------------------------------------------------------------------------------
# Dashboard ‡∏´‡∏•‡∏±‡∏Å (‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
# ----------------------------------------------------------------------------------
if not df.empty:
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)

    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df.columns:
        df["‡πÅ‡∏ú‡∏ô‡∏Å"] = df["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})

    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df.columns:
        df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
        df["‡∏õ‡∏µ"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year + 543
        df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.to_period("M")
    
    if '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' in df.columns:
        df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'] = pd.to_datetime(df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time
        df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'] = df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'].apply(lambda t: datetime.time(0, 0) if pd.isna(t) else t)
    if '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô' in df.columns:
        df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'] = pd.to_datetime(df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time
        df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'] = df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'].apply(lambda t: datetime.time(0, 0) if pd.isna(t) else t)

    df_filtered = df.copy()

    # --- Filter (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ---
    col1, col2, col3 = st.columns(3)
    
    with col1:
        years = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df["‡∏õ‡∏µ"].dropna().unique(), reverse=True)
        selected_year = st.selectbox("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", years)
        if selected_year != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡∏õ‡∏µ"] == int(selected_year)]

    with col2:
        if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_filtered.columns and not df_filtered.empty:
            available_months = sorted(df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
            month_options = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + [format_thai_month(m) for m in available_months]
            selected_month = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", month_options)
            if selected_month != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                mapping = {format_thai_month(m): str(m) for m in available_months}
                selected_period = mapping[selected_month]
                df_filtered = df_filtered[df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].astype(str) == selected_period]

    with col3:
        departments = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"].dropna().unique())
        selected_dept = st.selectbox("üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", departments)
        if selected_dept != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"] == selected_dept]
    # -----------------------------------

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ ---
    def leave_days(row):
        if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(row):
            return 0.5
        return 1

    df_filtered["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏Ç‡∏≤‡∏î"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏™‡∏≤‡∏¢"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢"]
    summary = df_filtered.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()

    st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤ / ‡∏Ç‡∏≤‡∏î / ‡∏™‡∏≤‡∏¢")

    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ---
    if 'selected_employee' not in st.session_state:
        st.session_state.selected_employee = '-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --'
    all_names = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].unique())
    selected_employee = st.selectbox("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", all_names, key='selected_employee')

    # --- ‡∏™‡∏µ‡∏Å‡∏£‡∏≤‡∏ü: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à: ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°, ‡∏Ç‡∏≤‡∏î: ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á, ‡∏™‡∏≤‡∏¢: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á) ---
    colors = {
        "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": "#C70039", 
        "‡∏Ç‡∏≤‡∏î": "#FF5733", 
        "‡∏™‡∏≤‡∏¢": "#FFC300", 
    }

# ----------------------------------------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Tabs ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
# ----------------------------------------------------------------------------------
tabs = st.tabs(leave_types)
for t, leave in zip(tabs, leave_types):
    with t:
        st.subheader(f"üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {leave} (‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•)")
        
        if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            summary_filtered = summary[summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
            person_data_full = df_filtered[df_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
        else:
            summary_filtered = summary.reset_index(drop=True)
            person_data_full = df_filtered.reset_index(drop=True)

        st.markdown("### üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
        summary_filtered_display = summary_filtered[summary_filtered[leave_types].sum(axis=1) > 0]
        st.dataframe(summary_filtered_display, use_container_width=True, hide_index=True)

        # ... (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤) ...

        ranking = summary[["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave]].sort_values(by=leave, ascending=False).reset_index(drop=True)
        ranking.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", range(1, len(ranking) + 1))
        ranking_display = ranking
        if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            ranking_display = ranking_display[ranking_display["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee]
        
        ranking_display = ranking_display[ranking_display[leave] > 0] 
        
        st.markdown("### üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö")
        st.dataframe(ranking_display.reset_index(drop=True), use_container_width=True, hide_index=True)


# ----------------------------------------------------------------------------------
# Pie Chart (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç radius ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
# ----------------------------------------------------------------------------------
st.markdown("---")
st.subheader("ü•ß ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢ (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠ + ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå)")

total_summary = summary[leave_types].sum().reset_index()
total_summary.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°']
total_summary = total_summary[total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] > 0].reset_index(drop=True)

if total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'].sum() > 0:
    total = total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'].sum()
    total_summary['Percentage'] = (total_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] / total * 100).round(1)
    total_summary['label'] = total_summary.apply(lambda x: f"{x['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó']} {x['Percentage']}%", axis=1)

    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á base chart
    base = alt.Chart(total_summary).encode(
        theta=alt.Theta("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", stack=True),
        color=alt.Color(
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
            scale=alt.Scale(domain=list(colors.keys()), range=list(colors.values()))
        ),
        order=alt.Order("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", sort="descending"), 
        tooltip=[
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
            alt.Tooltip("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°", format=".1f", title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)"),
            alt.Tooltip("Percentage", format=".1f", title="‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)")
        ]
    )

    # 2. ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏´‡∏•‡∏±‡∏Å
    pie = base.mark_arc(outerRadius=160, innerRadius=60)

    # 3. Text Label (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å)
    # *** ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ radius ‡∏à‡∏≤‡∏Å 250 ‡πÄ‡∏õ‡πá‡∏ô 190 (‡∏´‡∏£‡∏∑‡∏≠ 180) ***
    text_labels = base.mark_text(
        radius= 190,  # <<< ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏∂‡πâ‡∏ô >>>
        size=20,
        fontWeight="bold",
    ).encode(
        text=alt.Text('label:N'),
        color=alt.value('black') 
    )

    # 4. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏° (‡∏£‡∏ß‡∏° 100%)
    center_text = alt.Chart(pd.DataFrame({'text': [f"‡∏£‡∏ß‡∏° 100%"]})).mark_text(
        size=20, color='black', fontWeight='bold'
    ).encode(text='text:N')

    # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô: ‡∏ß‡∏á‡∏Å‡∏•‡∏° + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á
    chart = pie + text_labels + center_text
    
    chart = chart.properties(
        width=400,
        height=400,
        title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢"
    )

    st.altair_chart(chart, use_container_width=True)

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ Pie Chart
    st.dataframe(total_summary, use_container_width=True, hide_index=True)

else:
    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")