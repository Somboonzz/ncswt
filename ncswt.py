import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz

st.set_page_config(page_title="HR Dashboard", layout="wide")

# -----------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô thai_date ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏õ‡∏µ + 543)
    return dt.strftime(f"%d/%m/{dt.year + 543}")

thai_months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]

def format_thai_month(period):
    year = period.year + 543
    month = thai_months[period.month - 1]
    return f"{month} {year}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥)
def format_value(val, is_time=False):
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 0/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 0/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°"""
    if is_time:
         return f"{val}" # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '‡∏™‡∏≤‡∏¢'
    if val == 0:
         return "0"
    # ‡πÉ‡∏ä‡πâ .1f ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°
    return f"{val:.1f}" if val != int(val) else f"{int(val)}"
    
# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
# -----------------------------
@st.cache_data(ttl=300)
def load_data(file_path="attendances.xlsx"):
    try:
        if file_path and os.path.exists(file_path):
            df = pd.read_excel(file_path, engine='openpyxl', dtype={'‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô': str, '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô': str})
            return df
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame()

df = load_data()

# -----------------------------
# ‡∏õ‡∏∏‡πà‡∏° Refresh
# -----------------------------
if st.button("üîÑ Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Manual)"):
    st.cache_data.clear()
    st.rerun()

# -----------------------------
# ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
# -----------------------------
bangkok_now = datetime.datetime.now(pytz.utc).astimezone(bangkok_tz)
st.markdown(
    f"<div style='text-align:right; font-size:50px; color:#FF5733; font-weight:bold;'>"
    f"üóì {thai_date(bangkok_now)} ¬†| ¬†‚è∞ {bangkok_now.strftime('%H:%M:%S')}</div>",
    unsafe_allow_html=True
)

# -----------------------------
# Dashboard
# -----------------------------
if not df.empty:
    # --- ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)

    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df.columns:
        df["‡πÅ‡∏ú‡∏ô‡∏Å"] = df["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})

    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df.columns:
        df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®.
        df["‡∏õ‡∏µ"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year + 543
        df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.to_period("M")

    # --- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å
    for col, new_col in [("‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤"), ("‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å")]:
        if col in df.columns:
            df[new_col] = pd.to_datetime(df[col], format='%H:%M:%S', errors='coerce').dt.time
            df[new_col] = df[new_col].apply(lambda t: datetime.time(0, 0) if pd.isna(t) else t)

    df_filtered = df.copy()

    # --- Filter ‡∏õ‡∏µ
    col1, col2, col3 = st.columns(3)
    with col1:
        years = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df["‡∏õ‡∏µ"].dropna().unique(), reverse=True)
        selected_year = st.selectbox("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", years)
        if selected_year != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡∏õ‡∏µ"] == int(selected_year)]

    # --- Filter ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    with col2:
        if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_filtered.columns and not df_filtered.empty:
            available_months = sorted(df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
            month_options = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + [format_thai_month(m) for m in available_months]
            selected_month = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", month_options)
            if selected_month != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô Period
                mapping = {format_thai_month(m): m for m in available_months}
                selected_period = mapping[selected_month]
                df_filtered = df_filtered[df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] == selected_period]
        else:
            st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"], disabled=True)


    # --- Filter ‡πÅ‡∏ú‡∏ô‡∏Å
    with col3:
        departments = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"].dropna().unique())
        selected_dept = st.selectbox("üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", departments)
        if selected_dept != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            df_filtered = df_filtered[df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"] == selected_dept]

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°)
    
    def leave_days(x):
        """‡∏ô‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏•‡∏≤: 0.5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô, 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°/‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
        if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(x):
            return 0.5
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        valid_full_day_exceptions = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô", "‡∏•‡∏≤‡∏Ñ‡∏•‡∏≠‡∏î"] 
        if str(x) in valid_full_day_exceptions:
            return 1
        return 0 # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏•‡∏≤/‡∏Ç‡∏≤‡∏î/‡∏™‡∏≤‡∏¢

    # ******************************************************************************
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô/‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏≤‡∏•‡∏á‡πÉ‡∏ô df_filtered ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Expander
    df_filtered["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(leave_days)
    # ******************************************************************************

    df_filtered["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏Ç‡∏≤‡∏î"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏™‡∏≤‡∏¢"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_filtered["‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary = df_filtered.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()

    st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤ / ‡∏Ç‡∏≤‡∏î / ‡∏™‡∏≤‡∏¢")

    # --- ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ---
    if 'selected_employee' not in st.session_state:
        st.session_state.selected_employee = '-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --'
    all_names = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].unique())
    selected_employee = st.selectbox("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", all_names, key='selected_employee')

    colors = {
        "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à": "#FFC300",
        "‡∏Ç‡∏≤‡∏î": "#C70039",
        "‡∏™‡∏≤‡∏¢": "#FF5733",
        "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô": "#33C4FF"
    }

    tabs = st.tabs(leave_types)
    for t, leave in zip(tabs, leave_types):
        with t:
            st.subheader(f"üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {leave}")

            # --- ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                summary_filtered = summary[summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
                # ‡πÉ‡∏ä‡πâ df_filtered ‡πÄ‡∏î‡∏¥‡∏° ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß
                person_data_full = df_filtered[df_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == selected_employee].reset_index(drop=True)
            else:
                summary_filtered = summary
                person_data_full = df_filtered

            st.markdown("### üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            summary_display_copy = summary_filtered.copy()
            for col in leave_types:
                # ‡πÉ‡∏ä‡πâ format_value ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                summary_display_copy[col] = summary_display_copy[col].apply(lambda x: format_value(x))

            st.dataframe(summary_display_copy, use_container_width=True, hide_index=True)

            # --- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏•‡∏≤ (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
            if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --" and not person_data_full.empty:
                # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                if leave == "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à":
                    relevant_exceptions = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                    unit = '‡∏ß‡∏±‡∏ô'
                elif leave == "‡∏Ç‡∏≤‡∏î":
                    relevant_exceptions = ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                    unit = '‡∏ß‡∏±‡∏ô'
                elif leave == "‡∏™‡∏≤‡∏¢":
                    relevant_exceptions = ["‡∏™‡∏≤‡∏¢"]
                    unit = '‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                else: # ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô
                    relevant_exceptions = ["‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
                    unit = '‡∏ß‡∏±‡∏ô'

                # 2. ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                dates = person_data_full.loc[
                    person_data_full["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(relevant_exceptions),
                    ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"] # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
                ].sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False)

                if not dates.empty:
                    with st.expander(f"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ({leave})"):
                        # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
                        total_days = dates["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"].sum()
                        
                        for _, row in dates.iterrows():
                            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤, ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å
                            date_str = thai_date(row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']) 
                            entry_time = row['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'].strftime('%H:%M')
                            exit_time = row['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'].strftime('%H:%M')
                            exception_text = row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                            label = f"‚Ä¢ **{date_str}** &nbsp;&nbsp; **{entry_time}** - **{exit_time}** &nbsp;&nbsp;&nbsp;&nbsp; **{exception_text}**"
                            st.markdown(label, unsafe_allow_html=True)

                        # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        # ‡πÉ‡∏ä‡πâ format_value ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á 7.5 ‡∏´‡∏£‡∏∑‡∏≠ 7.0
                        st.markdown("---")
                        st.markdown(f"**‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:** **{format_value(total_days)}** {unit}", unsafe_allow_html=True)


            # --- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
            ranking = summary_filtered[["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave]].sort_values(by=leave, ascending=False).reset_index(drop=True)
            ranking.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", range(1, len(ranking) + 1))
            ranking_display = ranking[ranking[leave] > 0]
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            ranking_display_copy = ranking_display.copy()
            ranking_display_copy[leave] = ranking_display_copy[leave].apply(lambda x: format_value(x))

            st.markdown("### üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö")
            st.dataframe(ranking_display_copy.reset_index(drop=True), use_container_width=True, hide_index=True)

            # --- ‡∏Å‡∏£‡∏≤‡∏ü
            if not ranking_display.empty:
                chart_data = ranking_display if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --" else ranking_display.head(20)
                chart_title = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {leave}" if selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --" else f"20 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà '{leave}'"

                chart = (
                    alt.Chart(chart_data)
                    .mark_bar(cornerRadius=5, color=colors.get(leave, "#C70039"))
                    .encode(
                        x=alt.X(leave + ":Q", title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ({'‡∏ß‡∏±‡∏ô' if leave != '‡∏™‡∏≤‡∏¢' else '‡∏Ñ‡∏£‡∏±‡πâ‡∏á'})"),
                        y=alt.Y("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:N", sort="-x", title="‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"),
                        tooltip=["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave],
                    )
                    .properties(title=chart_title)
                )
                st.altair_chart(chart, use_container_width=True)
            else:
                st.info(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{leave}' ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå attendances.xlsx ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")