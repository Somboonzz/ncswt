import streamlit as st
import pandas as pd
import altair as alt
import datetime
import os
import pytz  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤

st.set_page_config(page_title="HR Dashboard", layout="wide")

# -----------------------------
# ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
# -----------------------------
bangkok_tz = pytz.timezone("Asia/Bangkok")

def thai_date(dt):
    return dt.strftime(f"%d/%m/{dt.year + 543}")

thai_months = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]

def format_thai_month(period):
    year = period.year + 543
    month = thai_months[period.month - 1]
    return f"{month} {year}"

# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
# -----------------------------
@st.cache_data(ttl=300)  # cache 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
def load_data(file_path="attendances.xlsx"):
    try:
        if file_path and os.path.exists(file_path):
            df = pd.read_excel(file_path, engine='openpyxl', dtype={'‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô': str, '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô': str})
            return df
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel: attendances.xlsx")
            return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return pd.DataFrame()

df = load_data()

# -----------------------------
# ‡∏õ‡∏∏‡πà‡∏° Refresh
# -----------------------------
if st.button("üîÑ Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Manual)"):
    st.cache_data.clear()  # ‡∏•‡πâ‡∏≤‡∏á cache
    st.rerun()

# -----------------------------
# ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
# -----------------------------
bangkok_now = datetime.datetime.now(pytz.utc).astimezone(bangkok_tz)
st.markdown(
    f"<div style='text-align:right; font-size:50px; color:#FF5733; font-weight:bold;'>"
    f"üóì {thai_date(bangkok_now)}  |  ‚è∞ {bangkok_now.strftime('%H:%M:%S')}</div>",
    unsafe_allow_html=True
)

# -----------------------------
# ‡πÅ‡∏™‡∏î‡∏á dashboard ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -----------------------------
if not df.empty:
    for col in ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip().str.replace(r"\s+", " ", regex=True)

    if "‡πÅ‡∏ú‡∏ô‡∏Å" in df.columns:
        df["‡πÅ‡∏ú‡∏ô‡∏Å"] = df["‡πÅ‡∏ú‡∏ô‡∏Å"].replace({"nan": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"})

    if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" in df.columns:
        df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors='coerce')
        df["‡∏õ‡∏µ"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year + 543
        df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.to_period("M")
    
    if '‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô' in df.columns:
        df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'] = pd.to_datetime(df['‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time
        df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'] = df['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'].apply(lambda t: datetime.time(0, 0) if pd.isna(t) else t)
    if '‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô' in df.columns:
        df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'] = pd.to_datetime(df['‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô'], format='%H:%M:%S', errors='coerce').dt.time
        df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'] = df['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'].apply(lambda t: datetime.time(0, 0) if pd.isna(t) else t)

    df_filtered = df.copy()

    # --- Filter ‡∏õ‡∏µ
    years = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df["‡∏õ‡∏µ"].dropna().unique(), reverse=True)
    selected_year = st.selectbox("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ", years)
    if selected_year != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
        df_filtered = df_filtered[df_filtered["‡∏õ‡∏µ"] == int(selected_year)]

    # --- Filter ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    if "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" in df_filtered.columns and not df_filtered.empty:
        available_months = sorted(df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].dropna().unique())
        month_options = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + [format_thai_month(m) for m in available_months]
        selected_month = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", month_options)
        if selected_month != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
            mapping = {format_thai_month(m): str(m) for m in available_months}
            selected_period = mapping[selected_month]
            df_filtered = df_filtered[df_filtered["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"].astype(str) == selected_period]

    # --- Filter ‡πÅ‡∏ú‡∏ô‡∏Å
    departments = ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + sorted(df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"].dropna().unique())
    selected_dept = st.selectbox("üè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", departments)
    if selected_dept != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
        df_filtered = df_filtered[df_filtered["‡πÅ‡∏ú‡∏ô‡∏Å"] == selected_dept]

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤
    def leave_days(row):
        if "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô" in str(row):
            return 0.5
        return 1

    df_filtered["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏Ç‡∏≤‡∏î"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(
        lambda x: leave_days(x) if str(x) in ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"] else 0
    )
    df_filtered["‡∏™‡∏≤‡∏¢"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏™‡∏≤‡∏¢" else 0)
    df_filtered["‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"] = df_filtered["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(lambda x: 1 if str(x) == "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô" else 0)

    leave_types = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏Ç‡∏≤‡∏î", "‡∏™‡∏≤‡∏¢", "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô"]
    summary = df_filtered.groupby(["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å"])[leave_types].sum().reset_index()

    st.title("üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤ / ‡∏Ç‡∏≤‡∏î / ‡∏™‡∏≤‡∏¢")

    colors = {lt: "#C70039" for lt in leave_types}

    if "selected_employee" not in st.session_state:
        st.session_state.selected_employee = None

    tabs = st.tabs(leave_types)
    for t, leave in zip(tabs, leave_types):
        with t:
            st.subheader(f"üèÜ ‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö {leave}")

            all_names = summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].unique()
            default_name = st.session_state.selected_employee or "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"

            selected_name_tab = st.selectbox(
                f"üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ({leave})",
                ["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + list(all_names),
                index=(list(["-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --"] + list(all_names)).index(default_name)
                       if default_name in list(all_names) else 0),
                key=f"search_{leave}"
            )

            if selected_name_tab != st.session_state.selected_employee:
                st.session_state.selected_employee = selected_name_tab

            if st.session_state.selected_employee != "-- ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î --":
                summary_filtered = summary[summary["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == st.session_state.selected_employee].reset_index(drop=True)
                person_data_full = df_filtered[df_filtered["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] == st.session_state.selected_employee].reset_index(drop=True)
            else:
                summary_filtered = summary
                person_data_full = df_filtered

            st.markdown("### üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
            st.dataframe(summary_filtered, use_container_width=True)

            if not person_data_full.empty:
                if leave == "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢/‡∏•‡∏≤‡∏Å‡∏¥‡∏à":
                    relevant_exceptions = ["‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à", "‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô", "‡∏•‡∏≤‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                elif leave == "‡∏Ç‡∏≤‡∏î":
                    relevant_exceptions = ["‡∏Ç‡∏≤‡∏î", "‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô"]
                else:
                    relevant_exceptions = [leave]

                dates = person_data_full.loc[
                    person_data_full["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].isin(relevant_exceptions), ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤", "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", "‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"]
                ]

                if not dates.empty:
                    total_days = dates["‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô"].apply(leave_days).sum()
                    with st.expander(f"{leave} ({total_days} ‡∏ß‡∏±‡∏ô)"):
                        date_list = []
                        for _, row in dates.iterrows():
                            entry_time = row['‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤'].strftime('%H:%M')
                            exit_time = row['‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å'].strftime('%H:%M')
                            
                            label = f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'].strftime('%d/%m/%Y')} | {entry_time} | {exit_time} ({row['‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô']})"
                            date_list.append(label)
                        st.write(date_list)

            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö
            ranking = summary_filtered[["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave]].sort_values(by=leave, ascending=False).reset_index(drop=True)
            ranking.insert(0, "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", range(1, len(ranking)+1))

            st.markdown("### üèÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô)")
            st.dataframe(ranking, use_container_width=True)

            # ‡∏Å‡∏£‡∏≤‡∏ü
            if not ranking.empty:
                chart = (
                    alt.Chart(ranking)
                    .mark_bar(cornerRadiusTopLeft=5, cornerRadiusBottomLeft=5, color=colors[leave])
                    .encode(
                        y=alt.Y("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:N", sort="-x", title="‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"),
                        x=alt.X(leave + ":Q", title=leave),
                        tooltip=["‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö", "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÅ‡∏ú‡∏ô‡∏Å", leave],
                    )
                    .properties(width=800, height=500)
                )
                st.altair_chart(chart, use_container_width=True)
            else:
                st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")